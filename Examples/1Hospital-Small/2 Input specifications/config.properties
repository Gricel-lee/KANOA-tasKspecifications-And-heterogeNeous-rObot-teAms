#Step 1: System configuration

	DATABASE_ROBOTS = resources/RobotsmodelV2.xml
	DATABASE_WORLDMODEL = resources/Worldmodel.xml
	DATABASE_TASKS = resources/TasksV2.xml
	MULTIROBOT_SYSTEM_CONFIG = resources/config.properties
	DATABASE_MISSION = resources/Mission.xml
	QOS_FILE = resources/QoS.txt

#Step2 : Set constrain solver tool	
	CONSTRAIN_SOLVER_ENGINE = libs/alloy.jar
	
#Step3 : Set model structure
	#MODEL_STRUCTURE = pm
	MODEL_STRUCTURE = dtmc

#Step3 : Set probabilistic tool
	MODEL_CHECKING_ENGINE = libs/PrismExecutor.jar
	
	
	PYTHON3_DIRECTORY = /usr/bin/python3









#Step4 : Configuraton properties for Evochecker
#Note: Automatic transformation of QoS requirements to constraints and minimisation/maximisation objectives
#      is currently under development. For the time being, the user should define the constraints & objectives 
#	   within the appropriate properties (e.g., pctl, csl) file.

#Step 1:Set the probabilistic model template and the probabilistic temporal logic formulae files of the problem
PROBLEM = MR
#MR
	MODEL_TEMPLATE_FILE = models/MR/robotsv1.pm
	PROPERTIES_FILE = models/MR/robotsv1.pctl
	


#Step2 : Set the algorithm (MOGA or Random) to run
	#ALGORITHM = RANDOM
	ALGORITHM = NSGAII
	#ALGORITHM = SPEA2
	#ALGORITHM = MOCELL

#Step 3: Set the population for the MOGAs
	POPULATION_SIZE = 50


#Step 4: Set the maximum number of evaluations, 5000
	MAX_EVALUATIONS = 100


#Step 5: Set the number of processors (for parallel execution)
	PROCESSORS = 1


#Step 6: Set plotting settings 
	#Note: requires Python3
	PLOT_PARETO_FRONT = true
	PYTHON3_DIRECTORY = /usr/bin/python3


#Step 7: Set additional settings
	VERBOSE = false

		

#############################################################3
#Advanced Settings (do not edit)
#	JAVA=/Library/Java/JavaVirtualMachines/openjdk-11.0.2.jdk/Contents/Home/bin/java

#	INIT_PORT = 8860

#	MODEL_CHECKING_ENGINE = libs/PrismExecutor.jar

#	MODEL_CHECKING_ENGINE_LIBS_DIRECTORY = libs/runtime

		
	
	
	
	
	
	
	
